version: '3.8'

services:
  # Database services - using your existing configuration
  mysql:
    image: mysql:8.0
    container_name: ecommerce_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: tiendoan
      MYSQL_PASSWORD: tiendoan
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:4.4.6
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecommerce_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --host mongodb:27017 -u admin -p password --authenticationDatabase admin --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8800:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongodb:27017/
    depends_on:
      - mongodb
    networks:
      - ecommerce_network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Cloud services
  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    container_name: config-service
    ports:
      - "8888:8888"
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce_network
    restart: on-failure

  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      - config-service
    
    networks:
      - ecommerce_network
    restart: on-failure

  # Application services
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    depends_on:
      - config-service
      - discovery-service
      - mysql
    networks:
      - ecommerce_network
    restart: on-failure

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    depends_on:
      - config-service
      - discovery-service
      - mongodb
    networks:
      - ecommerce_network
    restart: on-failure

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    depends_on:
      - config-service
      - discovery-service
      - mysql
    networks:
      - ecommerce_network
    restart: on-failure

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8070:8070"
    depends_on:
      - config-service
      - discovery-service
      - user-service
      - product-service
      - inventory-service
    networks:
      - ecommerce_network
    restart: on-failure

  chatbot:
    build: 
      context: ./chatbot/src
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - LLAMA_INDEX_API_KEY=${LLAMA_INDEX_API_KEY}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    volumes:
      - .:/app
    command: gunicorn --bind 0.0.0.0:5001 --workers 4 --threads 2 app:app

volumes:
  mysql_data:
  mongodb_data:
  redis_data:

networks:
  ecommerce_network:
    driver: bridge